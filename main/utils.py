import sqlite3
import os
import logging
from telebot import TeleBot, types
from config import config, user_lang

logger = logging.getLogger(__name__)

# Initialize the bot with the token from the config
bot = TeleBot(config['telegram']['key'])

translations = {
    'en': {
        'main_menu': 'Main Menu',
        'profile': 'üë§ Profile',
        'lang': 'üè≥Ô∏è Change language',
        'support': '‚öôÔ∏è Support',
        'create_post': '‚úèÔ∏è Create post',
        'back': 'üîô Back',
        'start': 'Welcome, how can I help you today?',
        'main_menu_prompt': 'üëá Main Menu üëá',
        'type_support': 'Choose the type of support:',
        'use_template': 'üîç Use template',
        'create_new_template': 'üñä Create template',
        'quick_post': '‚ö° Quick post',
        'tech_support': 'Technical support',
        'community_support': 'Community support',
        'commercial_offer': 'Commercial offer',
        'choose_option_text': 'Choose an option:',
        'add_title_to_create_template': 'Please add a title to create a template:',
        'add_description_to_create_template': 'Please add a description as well:',
        'add_media_to_create_template': 'Add a photo or video if you want (if not, write "-"):',
        'success_add_template': 'Template created successfully!',
        'example_post_text': 'Example of your post:',
        'edit_post': 'üñä Edit template',
        'choose_edit': 'Choose what you want to edit:',
        'edit_title': 'Title',
        'edit_description': 'Description',
        'edit_media': 'Media Data',
        're_title': 'Enter a new title for the template:',
        're_description': 'Enter a new description for the template:',
        're_media': 'Add a photo or video if you want (if not, write "-"):',
        'success_edit_template': 'Template edited successfully',
        'delete_template': 'üóëÔ∏è Delete template',
        're_delete': 'Are you sure you want to delete the template?',
        'success_delete_template': 'Template deleted successfully',
        'commands_only_group': 'Commands are only available in a private chat!',
        'admin_requirement': 'This command can only be used by administrators or moderators!',
        'chat_id_sent': 'Chat ID has been successfully sent to the private chat!',
        'err': 'Unfortunately, a technical error occurred, please try again! Or report this to technical support!',
        'role_update_success': 'Roles have been successfully updated!',
        'department_link': 'Go to the university schedule website:',
        'fiit_map': 'FIIT Map:',
        'exam_schedule': 'Go to the exam schedule website:',
        'disc_off': 'Official STU FIIT Discord:',
        'disc_prv': 'Discord created by freshmen:',
        'topic': 'Please choose a topic:',
        'no_templates': 'No templates have been created. Try creating a new template.',
        'error_no_template_selected': 'Error: Template not found, try again!',
        'cancel_delete_template': 'Template deletion canceled!',
        'err_media_type': 'Unsupported media type. Please upload photo or video.',
        'template_limit_reached': 'You have reached the limit of templates!',
        'invalid_format': 'Invalid format. Please upload a file in PNG or JPEG format',
        'gl_discrd': 'Discord group of this chat:',
        'minecraft_server_info': 'Minecraft server information:',
        'download_mods': 'Click to download mods:',
    },
    'ua': {
        'main_menu': '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',
        'profile': 'üë§ –ü—Ä–æ—Ñ—ñ–ª—å',
        'lang': 'üè≥Ô∏è –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É',
        'support': '‚öôÔ∏è –ü—ñ–¥—Ç—Ä–∏–º–∫–∞',
        'create_post': '‚úèÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç',
        'back': 'üîô –ù–∞–∑–∞–¥',
        'start': '–í—ñ—Ç–∞—é, —á–∏–º —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º —Å—å–æ–≥–æ–¥–Ω—ñ?',
        'main_menu_prompt': 'üëá –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üëá',
        'type_support': '–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:',
        'use_template': 'üîç –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —à–∞–±–ª–æ–Ω',
        'create_new_template': 'üñä –°—Ç–≤–æ—Ä–∏—Ç–∏ —à–∞–±–ª–æ–Ω',
        'quick_post': '‚ö° –®–≤–∏–¥–∫–∏–π –ø–æ—Å—Ç',
        'tech_support': '–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞',
        'community_support': '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏',
        'commercial_offer': '–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è',
        'choose_option_text': '–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:',
        'add_title_to_create_template': '–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ –Ω–∞–∑–≤—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É: ',
        'add_description_to_create_template': '–î–æ–¥–∞–π—Ç–µ —Ç–∞–∫–æ–∂ –æ–ø–∏—Å:',
        'add_media_to_create_template': '–î–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º (—è–∫—â–æ –Ω—ñ, –Ω–∞–ø–∏—à—ñ—Ç—å "-")',
        'success_add_template': '–®–∞–±–ª–æ–Ω —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!',
        'example_post_text': '–ü—Ä–∏–∫–ª–∞–¥ –≤–∞—à–æ–≥–æ —à–∞–±–ª–æ–Ω—É:',
        'edit_post': 'üñä –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —à–∞–±–ª–æ–Ω:',
        'edit_title': '–ù–∞–∑–≤–∞',
        'edit_description': '–û–ø–∏—Å',
        'edit_media': '–ú–µ–¥—ñ–∞ –¥–∞–Ω—ñ',
        're_title': '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É —à–∞–±–ª–æ–Ω—É:',
        're_description': '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å —à–∞–±–ª–æ–Ω—É:',
        're_media': '–î–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º (—è–∫—â–æ –Ω—ñ, –Ω–∞–ø–∏—à—ñ—Ç—å "-"):',
        'success_edit_template': '–®–∞–±–ª–æ–Ω —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ!',
        'delete_template': 'üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —à–∞–±–ª–æ–Ω',
        're_delete': '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —à–∞–±–ª–æ–Ω?',
        'success_delete_template': '–®–∞–±–ª–æ–Ω —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!',
        'commands_only_group': '–ö–æ–º–∞–Ω–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É —á–∞—Ç—ñ!',
        'admin_requirement': '–¶—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –∞–±–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∏!',
        'chat_id_sent': '–ê–π–¥—ñ —á–∞—Ç–∞ –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—Å–æ–±–∏—Å—Ç–∏–π —á–∞—Ç!',
        'err': '–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑! –ê–±–æ –ø–æ–≤—ñ–¥–æ–º—Ç–µ –ø—Ä–æ —Ü–µ —Ç–µ—Ö–Ω—ñ—á–Ω—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É!',
        'role_update_success': '–†–æ–ª—ñ –±—É–ª–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ!',
        'department_link': '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É:',
        'fiit_map': '–ö–∞—Ä—Ç–∞ FIIT:',
        'exam_schedule': '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º –µ–∫–∑–∞–º–µ–Ω—ñ–≤:',
        'disc_off': '–û—Ñ—ñ—Ü—ñ–π–Ω–∏–π –¥–∏—Å–∫–æ—Ä–¥ STU FIIT:',
        'disc_prv': '–î–∏—Å–∫–æ—Ä–¥ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –ø–µ—Ä—à–æ–∫—É—Ä—Å–Ω–∏–∫–∞–º–∏:',
        'topic': '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:',
        'choose_edit': '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:',
        'no_templates': '–®–∞–±–ª–æ–Ω–∏ –Ω–µ –±—É–ª–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —à–∞–±–ª–æ–Ω.',
        'error_no_template_selected': '–ü–æ–º–∏–ª–∫–∞: –®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!',
        'cancel_delete_template': '–í–∏–¥–∞–ª–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ!',
        'err_media_type': '–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø –º–µ–¥—ñ–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ.',
        'template_limit_reached': '–í–∏ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É —à–∞–±–ª–æ–Ω—ñ–≤!',
        'invalid_format': '–ù–µ–º–æ–∂–ª–∏–≤–∏–π —Ñ–æ—Ä–º–∞—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ PNG –∞–±–æ JPEG',
        'gl_discrd': '–î—ñ—Å–∫–æ—Ä–¥ –≥—Ä—É–ø–∞ —Ü—å–æ–≥–æ —á–∞—Ç—É:',
        'minecraft_server_info': '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Ä–≤–µ—Ä Minecraft:',
        'download_mods': '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥–∏:',
    }
}


def take_info(message):
    chat_id = message.chat.id
    topic_id = message.message_thread_id if hasattr(message, 'message_thread_id') else None
    login = message.from_user.username
    message_id = message.message_id
    lang = user_lang.get(chat_id, 'en')
    return chat_id, topic_id, login, message_id, lang

# Function to display the main menu
def main_menu(chat_id):
    lang = user_lang.get(chat_id, 'en')
    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)

    connection = sqlite3.connect('../db/database.sql')
    cursor = connection.cursor()

    try:
        cursor.execute('SELECT status FROM users WHERE chat_id = ?', (chat_id,))
        role_row = cursor.fetchone()
        if not role_row:
            logger.info(f"Role not found in database with chat_id {chat_id}")
            bot.send_message(chat_id, "Error- Role not found!Please contact technical support!")
            return
        role = role_row[0]

        if role in ["ADMIN", "MODERATOR"]:
            btn1 = types.KeyboardButton(translations[lang]['create_post'])
            btn2 = types.KeyboardButton(translations[lang]['profile'])
            btn3 = types.KeyboardButton(translations[lang]['lang'])
            btn4 = types.KeyboardButton(translations[lang]['support'])
            markup.add(btn1, btn2, btn3, btn4)
        else:
            btn2 = types.KeyboardButton(translations[lang]['profile'])
            btn3 = types.KeyboardButton(translations[lang]['lang'])
            btn4 = types.KeyboardButton(translations[lang]['support'])
            markup.add(btn2, btn3, btn4)
        bot.send_message(chat_id, translations[lang]['main_menu_prompt'], reply_markup=markup)

    except sqlite3.Error as e:
        bot.send_message(chat_id, f"Database error: {e}")
    finally:
        connection.close()

# Function to ask the user to choose a language
def ask_language(chat_id):
    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)
    btn1 = types.KeyboardButton('English üá¨üáß')
    btn2 = types.KeyboardButton('–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶')
    markup.add(btn1, btn2)
    bot.send_message(chat_id, "Please choose your language / –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –±—É–¥—å-–ª–∞—Å–∫–∞", reply_markup=markup)

# Function to escape special characters for Markdown
def escape_markdown(text):
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    return ''.join(['\\' + char if char in escape_chars else char for char in text])

# Function to save photo
def save_photo(file_info, file_id, lang):
    valid_extensions = ['.png', '.jpg', '.jpeg']
    _, file_extension = os.path.splitext(file_info.file_path)

    if file_extension.lower() not in valid_extensions:
        return translations[lang]['invalid_format']

    # Create folder if it doesn't exist
    if not os.path.exists('../photos'):
        os.makedirs('../photos')

    file_path = os.path.join('../photos', f'{file_id}{file_extension}')
    downloaded_file = bot.download_file(file_info.file_path)
    with open(file_path, 'wb') as new_file:
        new_file.write(downloaded_file)

    return file_path


# Function to save video
def save_video(file_info, file_id, lang):
    valid_extensions = ['.mp4']
    _, file_extension = os.path.splitext(file_info.file_path)

    if file_extension.lower() not in valid_extensions:
        return translations[lang]['invalid_format']

    # Create folder if it doesn't exist
    if not os.path.exists('../videos'):
        os.makedirs('../videos')

    file_path = os.path.join('../videos', f'{file_id}{file_extension}')
    downloaded_file = bot.download_file(file_info.file_path)
    with open(file_path, 'wb') as new_file:
        new_file.write(downloaded_file)

    return file_path

# Function to get user ID from the chat ID
def get_user_id(chat_id):
    connection = sqlite3.connect('../db/database.sql')
    cursor = connection.cursor()
    cursor.execute('SELECT id FROM users WHERE chat_id = ?', (chat_id,))
    result = cursor.fetchone()
    connection.close()
    if result:
        return result[0]
    else:
        logger.info(f"No user found with chat_id {chat_id}")
